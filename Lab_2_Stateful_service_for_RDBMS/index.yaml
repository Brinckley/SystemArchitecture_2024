openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Social Network API'
  description: Perform operations for social network users
servers:
  - url: http://0.0.0.0:8080
    description: Social network server

paths:
  /account:
    get:
      summary: Get all accounts
      responses:
        '200':
          description: List of all accounts in the social network
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/accounts'
        '204':
          description: No content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/accounts'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creating new account
      parameters:
      - name: username
        description: Unique account username
        in: query
        required: true
        schema:
          type: string
      - name: password
        description: Password fot the account
        in: query
        required: true
        schema:
          type: string
      - name: first_name
        description: User's first name 
        in: query
        required: true
        schema:
          type: string
      - name: last_name
        description: User's last name 
        in: query
        required: true
        schema:
          type: string
      - name: email
        description: User's email 
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Id of the created user
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/accountId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/{account_id}:
    get:
      summary: Get account by id
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Data of the account with given id
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/account'
        '204':
          description: No content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/account'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    put: 
      summary: Updating account with given ID
      parameters:
        - name: account_id
          description: unique account id
          in: path
          required: true
          schema:
            type: integer
        - name: username
          description: Unique account username
          in: query
          required: true
          schema:
            type: string
        - name: password
          description: Password fot the account
          in: query
          required: true
          schema:
            type: string
        - name: first_name
          description: User's first name 
          in: query
          required: true
          schema:
            type: string
        - name: last_name
          description: User's last name 
          in: query
          required: true
          schema:
            type: string
        - name: email
          description: User's email 
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data of the updated account
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/account'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete account by id
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Data of the account with given id
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/accountId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /account/{account_id}/posts:
    get:
      summary: Get posts by account
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: All posts by account with the given ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/posts'
        '204':
          description: No Content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/posts'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    post:
      summary: Creating new account
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: account_id
        description: unique account id
        in: query
        required: true
        schema:
          type: integer
      - name: content
        description: Content of the post
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Id of the created post
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/postId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/{account_id}/posts/{post_id}:
    get:
      summary: Get post by account ID and post ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: post_id
        description: unique post id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Post by account ID and post ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/post'
        '204':
          description: No Content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/post'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    put:
      summary: Update post by account ID and post ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: post_id
        description: unique post id
        in: path
        required: true
        schema:
          type: integer
      - name: account_id
        description: unique account id
        in: query
        required: true
        schema:
          type: integer
      - name: content
        description: Content of the post
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Updated post by account ID and post ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/post'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      summary: Delete post by account by post ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: post_id
        description: unique post id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Deleted post ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/postId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  

  /account/{account_id}/messages:
    get:
      summary: Get all messages received by account with ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: All messages received by account with ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/messages'
        '204':
          description: No Content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/messages'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    post:
      summary: Get post by account ID and post ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: sender_id
        description: unique account id of sender
        in: query
        required: true
        schema:
          type: integer
      - name: receiver_id
        description: unique account id of receiver
        in: query
        required: true
        schema:
          type: integer
      - name: content
        description: content of the message
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Id of the created message
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/messageId'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  /account/{account_id}/messages/{msg_id}:
    get:
      summary: Get message received by account with ID by msg ID
      parameters:
      - name: account_id
        description: unique account id
        in: path
        required: true
        schema:
          type: integer
      - name: msg_id
        description: unique message id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Message received by account with ID
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/message'
        '204':
          description: No Content
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/message'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  

  /account/search:
    get:
      summary: Get user by mask
      parameters:
      - name: first_name
        description: User's first name 
        in: query
        required: true
        schema:
          type: string
      - name: last_name
        description: User's last name 
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Connection between microservices failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    accountId:
      description: Account unique ID
      type: integer
    postId:
      description: Post unique ID
      type: integer
    messageId:
      description: Message unique ID
      type: integer
    accounts:
      type: array
      items:
        $ref: '#/components/schemas/account'
    posts:
      type: array
      items:
        $ref: '#/components/schemas/post'
    messages:
      type: array
      items:
        $ref: '#/components/schemas/message'
    account:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
    message:
      type: object
      properties:
        id:
          type: integer
        sender_id:
          type: integer
        receiver_id:
          type: integer
        content:
          type: string
    post:
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        content:
          type: string

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: Error description
          type: string
  securitySchemes:
      basicAuth:     
        type: http
        scheme: basic
security:
  - basicAuth: []